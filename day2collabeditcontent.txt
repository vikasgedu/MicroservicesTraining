https://drive.google.com/drive/folders/1S8ZemPGq03_smqgFzdWPSwWus6g6FfhQ?usp=sharing

package com.bofa.training.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/test")
public class FirstController {
    @RequestMapping("/msg/{name}")
    public @ResponseBody String simpleResponse(@PathVariable("name") String userName) {
        return "<html><body><h2>Welcome to Spring Boot "+userName+" </h2></body></html>";
    }
    
    
    @RequestMapping("/msg/{firstName}/{lastName}")
    public @ResponseBody String simpleResponse(@PathVariable("firstName") String firstName,
            @PathVariable("lastName") String lastName) {
        return "<html><body><h2>Welcome to Spring Boot "+firstName+" "+lastName+" </h2></body></html>";
    }
}


<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.31</version>
</dependency>


package com.bofa.training.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="emp_tbl")
public class Employee {

    @Id
    @Column(name = "emp_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    @Column(name = "emp_name")
    private String name;
    private String designation;
    public Employee(int id, String name, String designation) {
        super();
        this.id = id;
        this.name = name;
        this.designation = designation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    
    
    
    
}




package com.bofa.training.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bofa.training.domain.Employee;

@Repository
public interface EmployeeRepository  extends JpaRepository<Employee, Integer>{

}


mysql> show create table employee;


package com.bofa.training.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bofa.training.domain.Employee;
import com.bofa.training.repository.EmployeeRepository;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository repository;
    
    public int addEmployee(Employee e) {
        Employee e1=repository.saveAndFlush(e);
        return e1.getId();
    }
    public Employee findEmployee(int id) {
        
        return repository.findById(id).get();
    }
    public List<Employee> getAllEmployees() {
        
        return repository.findAll();
    }
    
    public int updateEmployee(int id,Employee e) {
        Employee e1=repository.findById(id).get();
        e1.setName(e.getName());
        e1.setDesignation(e.getDesignation());
        repository.save(e1);
        return id;
    }
    
    public int removeEmployee(int id) {
        Employee e1=repository.findById(id).get();
        repository.delete(e1);
        return id;
    }
    
    
}


package com.bofa.training.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.domain.Employee;
import com.bofa.training.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Employee> getEmployee(@PathVariable("id") int empId){
        Employee employee=service.findEmployee(empId);
        return new ResponseEntity<>(employee, HttpStatus.OK);
    }

}


spring.application.name=rest-jpa-app
spring.datasource.url=jdbc:mysql://localhost:3306/trainingdb
spring.datasource.username=root
spring.datasource.password=rps@12345
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#enables automatic creation of tables if they don't exist
spring.jpa.hibernate.ddl-auto=update

package com.bofa.training.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.domain.Employee;
import com.bofa.training.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Employee> getEmployee(@PathVariable("id") int empId){
        Employee employee=service.findEmployee(empId);
        return new ResponseEntity<>(employee, HttpStatus.OK);
    }
    @PostMapping(produces = MediaType.TEXT_PLAIN_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> addEmployee(@RequestBody Employee e){
        int id=service.addEmployee(e);
        return new ResponseEntity<>("Employee with id "+id+" added successfully", HttpStatus.CREATED);
    }
}


mysql> show tables;


mysql> select * from emp_tbl;


POST   http://localhost:8080/emp

{
    "name":"Rajesh",
    "designation":"Developer"
}


package com.bofa.training.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.domain.Employee;
import com.bofa.training.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}",produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Employee> getEmployee(@PathVariable("id") int empId){
        Employee employee=service.findEmployee(empId);
        return new ResponseEntity<>(employee, HttpStatus.OK);
    }
    @PostMapping(produces = MediaType.TEXT_PLAIN_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> addEmployee(@RequestBody Employee e){
        int id=service.addEmployee(e);
        return new ResponseEntity<>("Employee with id "+id+" added successfully", HttpStatus.CREATED);
    }
    
    @PutMapping(path = "/{id}",produces = MediaType.TEXT_PLAIN_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> updateEmployee(@PathVariable("id") int empId, @RequestBody Employee e){
        int id=service.updateEmployee(empId, e);
        return new ResponseEntity<>("Employee with id "+id+" added successfully", HttpStatus.OK);
    }
    
    
    @DeleteMapping(path = "/{id}",produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> removeEmployee(@PathVariable("id") int empId){
        int id=service.removeEmployee(empId);
        return new ResponseEntity<>("Employee with id "+id+" added successfully", HttpStatus.OK);
    }
    
    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Employee>> getAllEmployees(){
        return new ResponseEntity<>(service.getAllEmployees(), HttpStatus.OK);
    }
    
    
}


<dependency>
    <groupId>javax.xml.bind</groupId>
    <artifactId>jaxb-api</artifactId>
    <version>2.1</version>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
    <version>2.12.3</version>
</dependency>


package com.bofa.training.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.xml.bind.annotation.XmlRootElement;

@Entity
@Table(name="emp_tbl")
@XmlRootElement
public class Employee {

    @Id
    @Column(name = "emp_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    @Column(name = "emp_name")
    private String name;
    private String designation;
    public Employee(int id, String name, String designation) {
        super();
        this.id = id;
        this.name = name;
        this.designation = designation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    
    
    
    
}


package com.bofa.training.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.domain.Employee;
import com.bofa.training.service.EmployeeService;

@RestController
@RequestMapping("/emp")
public class EmployeeController {
    @Autowired
    private EmployeeService service;
    
    @GetMapping(path = "/{id}",produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<Employee> getEmployee(@PathVariable("id") int empId){
        Employee employee=service.findEmployee(empId);
        return new ResponseEntity<>(employee, HttpStatus.OK);
    }
    @PostMapping(produces = MediaType.TEXT_PLAIN_VALUE,consumes = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})
    public ResponseEntity<String> addEmployee(@RequestBody Employee e){
        int id=service.addEmployee(e);
        return new ResponseEntity<>("Employee with id "+id+" added successfully", HttpStatus.CREATED);
    }
    
    @PutMapping(path = "/{id}",produces = MediaType.TEXT_PLAIN_VALUE,consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> updateEmployee(@PathVariable("id") int empId, @RequestBody Employee e){
        int id=service.updateEmployee(empId, e);
        return new ResponseEntity<>("Employee with id "+id+" updated successfully", HttpStatus.OK);
    }
    
    
    @DeleteMapping(path = "/{id}",produces = MediaType.TEXT_PLAIN_VALUE)
    public ResponseEntity<String> removeEmployee(@PathVariable("id") int empId){
        int id=service.removeEmployee(empId);
        return new ResponseEntity<>("Employee with id "+id+" removed successfully", HttpStatus.OK);
    }
    
    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Employee>> getAllEmployees(){
        return new ResponseEntity<>(service.getAllEmployees(), HttpStatus.OK);
    }
}


<employee>
<name>Surya</name>
<designation>Accountant</designation>
</employee>


 <dependencies>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.2.11.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version>
</dependency>

  </dependencies>
  
  package com.bofa.training.domain;




public class Employee {

    
    private int id;
    
    private String name;
    private String designation;
    public Employee(int id, String name, String designation) {
        super();
        this.id = id;
        this.name = name;
        this.designation = designation;
    }
    public Employee() {
        super();
        // TODO Auto-generated constructor stub
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getDesignation() {
        return designation;
    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }
    
    
    
    
}


package com.bofa.training.restclient;

import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.bofa.training.domain.Employee;

public class GetClient {
public static void main(String[] args) {
    String url="http://localhost:8080/emp/1";
    RestTemplate template=new RestTemplate();
    ResponseEntity<Employee> entity= template.getForEntity(url,Employee.class);
    System.out.println("response status: "+entity.getStatusCodeValue());
    System.out.println("Response body ");
    Employee e=entity.getBody();
    System.out.println(e.getName()+"\t"+e.getDesignation());
    
    
    ResponseEntity<String> entity1= template.getForEntity(url,String.class);
    System.out.println(entity1.getBody());
}
}



package com.bofa.training.restclient;

import java.util.Arrays;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.bofa.training.domain.Employee;

public class GetXMLClient {
public static void main(String[] args) {
    String url="http://localhost:8080/emp/1";
    RestTemplate template=new RestTemplate();
    HttpHeaders headers=new HttpHeaders();
    headers.put("Accept", Arrays.asList(MediaType.APPLICATION_XML_VALUE));
    ResponseEntity<String> entity= template.exchange(url, HttpMethod.GET, new HttpEntity<>(headers),
            String.class);
    System.out.println(entity.getBody());
    
}
}


package com.bofa.training.restclient;

import java.util.Arrays;
import java.util.List;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.bofa.training.domain.Employee;

public class GetAllClient {
public static void main(String[] args) {
    String url="http://localhost:8080/emp";
    RestTemplate template=new RestTemplate();
    HttpHeaders headers=new HttpHeaders();
    headers.put("Accept", Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
    ResponseEntity<List<Employee>> entity=template.exchange(url,
            HttpMethod.GET, new HttpEntity<>(headers),
            new ParameterizedTypeReference<List<Employee>>() {});
    entity.getBody().forEach(e->System.out.println(e.getName()+"\t"+e.getDesignation()));
}
}

package com.bofa.training.restclient;

import java.util.Arrays;
import java.util.List;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.bofa.training.domain.Employee;

public class PostClient {
public static void main(String[] args) {
    String url="http://localhost:8080/emp";
    RestTemplate template=new RestTemplate();
    HttpHeaders headers=new HttpHeaders();
    headers.put("Content-Type", Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
    
    Employee e=new Employee();
    e.setName("Suresh");
    e.setDesignation("Architect");
    String respMsg= template.postForObject(url, e,
            String.class,new HttpEntity<>(headers));
    
    
    System.out.println(respMsg);
}
}


package com.bofa.training.itemservice.domain;

public class Item {
    private int itemCode;
    private String itemName;
    private double price;
    public int getItemCode() {
        return itemCode;
    }
    public void setItemCode(int itemCode) {
        this.itemCode = itemCode;
    }
    public String getItemName() {
        return itemName;
    }
    public void setItemName(String itemName) {
        this.itemName = itemName;
    }
    public double getPrice() {
        return price;
    }
    public void setPrice(double price) {
        this.price = price;
    }
    public Item(int itemCode, String itemName, double price) {
        super();
        this.itemCode = itemCode;
        this.itemName = itemName;
        this.price = price;
    }
    public Item() {
        super();
        // TODO Auto-generated constructor stub
    }
    
    

}


package com.bofa.training.itemservice.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.bofa.training.itemservice.domain.Item;

@Service
public class ItemService {
    private Map<Integer, Item> list=new HashMap<>();

    public ItemService() {
        super();
        // TODO Auto-generated constructor stub
        list.put(1001, new Item(1001, "Apple", 200));
        list.put(1002, new Item(1002, "Orange", 100));
        list.put(1003, new Item(1003, "Mango", 400));
    }

    public Item findItem(int code) {
        return list.get(code);
    }
    
}


package com.bofa.training.itemservice.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.itemservice.domain.Item;
import com.bofa.training.itemservice.service.ItemService;

@RestController
@RequestMapping("/item")
public class ItemController {

    @Autowired
    private ItemService service;
    
    @GetMapping(path="/{code}",produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Item> getItem(@PathVariable("code")int itemCode){
        return new ResponseEntity<Item>(service.findItem(itemCode), HttpStatus.OK);
    }
}


http://localhost:8001/item/1003




spring.application.name=eureka-server
server.port=8000
#url exposed to eureka clients
eureka.client.service-url.defaultZone=http://localhost:8000/eureka
#makes the current application not to fetch any info from eureka because this app is not a eureka client
eureka.client.fetch-registry=false
#disables registering as a eureka client
eureka.client.register-with-eureka=false



package com.bofa.training.eureka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }

}


spring.application.name=item-micro-service
server.port=8001
eureka.client.service-url.defaultZone=http://localhost:8000/eureka

http://localhost:8000/

application.properties of item-order-service

spring.application.name=item-order-service
server.port=9001
eureka.client.service-url.defaultZone=http://localhost:8000/eureka


package com.bofa.training.itemorderservice.domain;

public class ItemOrder {
    private int itemCode;
    private String itemName;
    private double totalAmount;
    
    public ItemOrder(int itemCode, String itemName, double totalAmount) {
        super();
        this.itemCode = itemCode;
        this.itemName = itemName;
        this.totalAmount = totalAmount;
    }
    public ItemOrder() {
        super();
        // TODO Auto-generated constructor stub
    }
    public int getItemCode() {
        return itemCode;
    }
    public void setItemCode(int itemCode) {
        this.itemCode = itemCode;
    }
    
    public String getItemName() {
        return itemName;
    }
    public void setItemName(String itemName) {
        this.itemName = itemName;
    }
    public double getTotalAmount() {
        return totalAmount;
    }
    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    
    
}



package com.bofa.training.itemorderservice.proxy;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.bofa.training.itemorderservice.domain.Item;

@Component
@FeignClient("ITEM-MICRO-SERVICE")
public interface ItemProxy {
    @GetMapping("/item/{code}")
    public Item getItemDetails(@PathVariable("code") int itemCode);

}


package com.bofa.training.itemorderservice.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bofa.training.itemorderservice.domain.Item;
import com.bofa.training.itemorderservice.domain.ItemOrder;
import com.bofa.training.itemorderservice.proxy.ItemProxy;

@Service
public class ItemOrderService {

    @Autowired
    private ItemProxy proxy;
    
    public ItemOrder getOrderDetails(int code,int quantity) {
        Item item=proxy.getItemDetails(code);
        ItemOrder order=new ItemOrder(code, item.getItemName(), item.getPrice()*quantity);
        return order;
    }
}




package com.bofa.training.itemorderservice.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bofa.training.itemorderservice.domain.ItemOrder;
import com.bofa.training.itemorderservice.service.ItemOrderService;

@RestController
@RequestMapping("/itemorder")
public class ItemOrderController {
    @Autowired
    private ItemOrderService service;
    
    @GetMapping(path="/{code}/{quantity}",produces = MediaType.APPLICATION_JSON_VALUE)
    public ItemOrder getOrderDetails(@PathVariable("code")int code,@PathVariable("quantity") int quantity)
    {
        return service.getOrderDetails(code, quantity);
    }
}



package com.bofa.training.itemorderservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients
public class ItemOrderServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(ItemOrderServiceApplication.class, args);
    }

}


http://localhost:9001/itemorder/1001/3

